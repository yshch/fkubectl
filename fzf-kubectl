#!/bin/sh -

IFS=' 	
'

FZF_CMD="fzf --multi -0 --height=100% --reverse --inline-info --header-lines=1"

#kubectl api-resources --namespaced=false | awk '(header_len){ print substr($0, 0, header_len) } (!header_len){ header_len=index($0, " APIGROUP") }'
#kubectl api-resources --namespaced=false | awk '(name_len){ print substr($0, 0, name_len) } (shortnames_len){ print substr($0, name_len + 1, shortnames_len - name_len - 1) } (!name_len){ name_len=index($0, " SHORTNAMES") } (!shortnames_len){ shortnames_len=index($0, "APIGROUP") }'

CLUSTER_LEVEL_RESOURCES="\
componentstatuses
cs
namespaces
ns
nodes
no
persistentvolumes
pv
mutatingwebhookconfigurations
validatingwebhookconfigurations
customresourcedefinitions
crd
crds
apiservices
tokenreviews
selfsubjectaccessreviews
selfsubjectrulesreviews
subjectaccessreviews
clusterissuers
certificatesigningrequests
csr
ciliumnodes
cn
runtimeclasses
podsecuritypolicies
psp
clusterrolebindings
clusterroles
priorityclasses
pc
volumesnapshotclasses
volumesnapshotcontents
csidrivers
csinodes
storageclasses
sc
volumeattachments
loggings"

usage() {
    cat << EOF
Usage: fzf-kubectl <command> [options]

  Available commands:
    g,  get         Display resources
    d,  describe    Describe resources
    e,  edit        Edit resources
    del,delete      Delete resources
        restart     Restart deployment/statefulset
        scale       Scale deployment/statefulset
    l,  logs        Print container logs
    al, app-logs    Print deployment/statefulset logs
        fetch       Copy file from container
        put         Copy file to container
    cm, configmap   Display configmap data
    sec,secret      Decode from b64 and display secret data
    e,  exec        Execute command in container
    rt, root        Run priviliged container
    w,  watch       Watch specific resource
    wn, watchns     Watch all resources in namespace
    ev, events      Display kubernetes events
    tp, top-pods    Display pod resource usage
    tn, top-nodes   Display node resource usage
    ctx,context     Switch context

  Available options:
    -c  pipe final command to xclip
    -s  simulate/dry-run
    -v  verbose

EOF
}

__fzfkubectl_execute() {
    cmd="$@"

    if [ "$FZFKUBECTL_CLIPBOARD" = "true" ] ; then
        printf "$*" | xclip
    fi

    if [ "$FZFKUBECTL_VERBOSE" = "true" ] ; then
        printf "$*\n"
    fi

    if [ "$FZFKUBECTL_DRYRUN" != "true" ] ; then
        "$@"
    fi
}

__fzfkubectl_is_namespaced() {
    resource="$1"

    if printf '%s' "$CLUSTER_LEVEL_RESOURCES" | grep -q "^${resource}s\\{0,1\\}$" ; then
        return 1
    else
        return 0
    fi
}

__fzfkubectl_select() {
    resource="$1"
    if [ -z "$resource" ] ; then
        exit 1
    fi

    kubectl get "$resource" | ${FZF_CMD} | awk '{ print $1 }'
}

__fzfkubectl_select_namespaced() {
    resource="$1"
    if [ -z "$resource" ] ; then
        exit 1
    fi

    sel_namespace=$(__fzfkubectl_select "namespace")
    if [ -z "$sel_namespace" ] ; then
        exit 1
    fi
    kubectl get "$resource" -n "$sel_namespace" | ${FZF_CMD} | awk -v "namespace=$sel_namespace" '{ print namespace "|" $1 }'
}

__fzfkubectl_select_api_resource() {
    kubectl api-resources | ${FZF_CMD} --no-multi | awk '{ print $1 }'
}

_fzfkubectl_get() {
    resource="$1"
    shift
    if [ -z "$resource" ] ; then
        printf 'no resource selected, exiting\n'
        exit 1
    fi

    if __fzfkubectl_is_namespaced "$resource" ; then
        sel_resources=$(__fzfkubectl_select_namespaced "$resource")
        if [ -z "$sel_resources" ] ; then
            printf 'no %s selected, exiting\n' "$resource"
            exit 1
        fi

        for cur_res in $sel_resources ; do
            __fzfkubectl_execute kubectl get "$resource" -n "${cur_res%%|*}" "${cur_res##*|}" -o yaml "$@"
        done
    else
        sel_resources=$(__fzfkubectl_select "$resource")
        if [ -z "$sel_resources" ] ; then
            printf 'no %s selected, exiting\n' "$resource"
            exit 1
        fi

        for cur_res in $sel_resources ; do
            __fzfkubectl_execute kubectl get "$resource" "${cur_res}" -o yaml "$@"
        done
    fi
}

_fzfkubectl_describe() {
    resource="$1"
    shift
    if [ -z "$resource" ] ; then
        printf 'no resource selected, exiting\n'
        exit 1
    fi

    if __fzfkubectl_is_namespaced "$resource" ; then
        sel_resources=$(__fzfkubectl_select_namespaced "$resource")
        if [ -z "$sel_resources" ] ; then
            printf 'no %s selected, exiting\n' "$resource"
            exit 1
        fi

        for cur_res in $sel_resources ; do
            __fzfkubectl_execute kubectl describe "$resource" -n "${cur_res%%|*}" "${cur_res##*|}" "$@"
        done
    else
        sel_resources=$(__fzfkubectl_select "$resource")
        if [ -z "$sel_resources" ] ; then
            printf 'no %s selected, exiting\n' "$resource"
            exit 1
        fi

        for cur_res in $sel_resources ; do
            __fzfkubectl_execute kubectl describe "$resource" "${cur_res}" "$@"
        done
    fi
}

_fzfkubectl_edit() {
    resource="$1"
    shift
    if [ -z "$resource" ] ; then
        printf 'no resource selected, exiting\n'
        exit 1
    fi

    if __fzfkubectl_is_namespaced "$resource" ; then
        sel_resources=$(__fzfkubectl_select_namespaced "$resource")
        if [ -z "$sel_resources" ] ; then
            printf 'no %s selected, exiting\n' "$resource"
            exit 1
        fi

        for cur_res in $sel_resources ; do
            __fzfkubectl_execute kubectl edit "$resource" -n "${cur_res%%|*}" "${cur_res##*|}" "$@"
        done
    else
        sel_resources=$(__fzfkubectl_select "$resource")
        if [ -z "$sel_resources" ] ; then
            printf 'no %s selected, exiting\n' "$resource"
            exit 1
        fi

        for cur_res in $sel_resources ; do
            __fzfkubectl_execute kubectl edit "$resource" "${cur_res}" "$@"
        done
    fi
}

_fzfkubectl_delete() {
    resource="$1"
    shift
    if [ -z "$resource" ] ; then
        printf 'no resource selected, exiting\n'
        exit 1
    fi

    if __fzfkubectl_is_namespaced "$resource" ; then
        sel_resources=$(__fzfkubectl_select_namespaced "$resource")
        if [ -z "$sel_resources" ] ; then
            printf 'no %s selected, exiting\n' "$resource"
            exit 1
        fi

        for cur_res in $sel_resources ; do
            __fzfkubectl_execute kubectl delete "$resource" -n "${cur_res%%|*}" "${cur_res##*|}" "$@"
        done
    else
        sel_resources=$(__fzfkubectl_select "$resource")
        if [ -z "$sel_resources" ] ; then
            printf 'no %s selected, exiting\n' "$resource"
            exit 1
        fi

        for cur_res in $sel_resources ; do
            __fzfkubectl_execute kubectl delete "$resource" "${cur_res}" "$@"
        done
    fi
}

_fzfkubectl_restart() {
    resource="$1"
    shift
    if [ -z "$resource" ] ; then
        printf 'no resource selected, exiting\n'
        exit 1
    fi

    sel_resources=$(__fzfkubectl_select_namespaced "$resource")
    if [ -z "$sel_resources" ] ; then
        printf 'no %s selected, exiting\n' "$resource"
        exit 1
    fi

    for cur_res in $sel_resources ; do
        __fzfkubectl_execute kubectl rollout restart "$resource" -n "${cur_res%%|*}" "${cur_res##*|}" "$@"
    done
}

_fzfkubectl_scale() {
    resource="$1"
    shift
    if [ -z "$resource" ] ; then
        printf 'no resource selected, exiting\n'
        exit 1
    fi

    sel_resources=$(__fzfkubectl_select_namespaced "$resource")
    if [ -z "$sel_resources" ] ; then
        printf 'no %s selected, exiting\n' "$resource"
        exit 1
    fi

    for cur_res in $sel_resources ; do
        __fzfkubectl_execute kubectl scale "$resource" -n "${cur_res%%|*}" "${cur_res##*|}" "$@"
    done
}

_fzfkubectl_logs() {
    sel_pod=$(__fzfkubectl_select_namespaced pod)
    if [ -z "$sel_pod" ] ; then
        printf 'no pod selected, exiting\n'
        exit 1
    fi

    sel_cont=$(kubectl get pods -n "${sel_pod%%|*}" "${sel_pod##*|}" -o=jsonpath='{.spec.containers[*].name}' | tr -s '[:space:]' '\n' | ${FZF_CMD} -1 --header-lines=0)
    if [ -z "$sel_cont" ] ; then
        printf 'no container selected, exiting\n'
        exit 1
    fi

    for cur_cont in $sel_cont ; do
        __fzfkubectl_execute kubectl logs -n "${sel_pod%%|*}" "${sel_pod##*|}" -c "${cur_cont}" "$@"
    done
}

_fzfkubectl_app_logs() {
    sel_app=$(kubectl get deployment,statefulset,daemonset --all-namespaces --no-headers | ${FZF_CMD} --header-lines=0 | awk '{ print $1 "|" $2 }')
    if [ -z "$sel_app" ] ; then
        printf 'no app selected, exiting\n'
        exit 1
    fi

    sel_labels=$(kubectl get -n "${sel_app%%|*}" "${sel_app##*|}" -o jsonpath='{ .spec.template.metadata.labels }' | jq -r 'to_entries | map("\(.key)=\(.value)") | join(",")')

    #kubectl -n "${sel_app%% *}" logs --all-containers -l ${sel_labels} "$@" | jq -R -r '. as $line | try fromjson catch $line'
    __fzfkubectl_execute kubectl logs -n "${sel_app%%|*}" --all-containers -l ${sel_labels} "$@"
}

_fzfkubectl_fetch() {
    if [ -z "$1" ] || [ -z "$2" ] ; then
        printf 'no filename provided, exiting\n'
        exit 1
    fi

    sel_pod=$(__fzfkubectl_select_namespaced pod)
    if [ -z "$sel_pod" ] ; then
        printf 'no pod selected, exiting\n'
        exit 1
    fi

    sel_cont=$(kubectl get pods -n "${sel_pod%%|*}" "${sel_pod##*|}" -o=jsonpath='{.spec.containers[*].name}' | tr -s '[:space:]' '\n' | ${FZF_CMD} -1 --no-multi --header-lines=0)
    if [ -z "$sel_cont" ] ; then
        printf 'no container selected, exiting\n'
        exit 1
    fi

    __fzfkubectl_execute kubectl -n "${sel_pod%%|*}" cp "${sel_pod##*|}":"$1" "$2" -c "${sel_cont}"
}

_fzfkubectl_put() {
    if [ -z "$1" ] || [ -z "$2" ] ; then
        printf 'no filename provided, exiting\n'
        exit 1
    fi

    sel_pod=$(__fzfkubectl_select_namespaced pod)
    if [ -z "$sel_pod" ] ; then
        printf 'no pod selected, exiting\n'
        exit 1
    fi

    sel_cont=$(kubectl get pods -n "${sel_pod%%|*}" "${sel_pod##*|}" -o=jsonpath='{.spec.containers[*].name}' | tr -s '[:space:]' '\n' | ${FZF_CMD} -1 --no-multi --header-lines=0)
    if [ -z "$sel_cont" ] ; then
        printf 'no container selected, exiting\n'
        exit 1
    fi

    __fzfkubectl_execute kubectl -n "${sel_pod%%|*}" cp "$1" "${sel_pod##*|}":"$2" -c "${sel_cont}"
}

_fzfkubectl_exec() {
    if [ -z "$*" ] ; then
        printf 'no command to execute, exiting\n'
        exit 1
    fi

    sel_pod=$(__fzfkubectl_select_namespaced pod)
    if [ -z "$sel_pod" ] ; then
        printf 'no pod selected, exiting\n'
        exit 1
    fi

    sel_cont=$(kubectl get pods -o=jsonpath='{.spec.containers[*].name}' -n "${sel_pod%%|*}" "${sel_pod##*|}" | tr -s '[:space:]' '\n' | ${FZF_CMD} -1 --header-lines=0)
    if [ -z "$sel_cont" ] ; then
        printf 'no container selected, exiting\n'
        exit 1
    fi

    for cur_cont in $sel_cont ; do
        __fzfkubectl_execute kubectl exec -n "${sel_pod%%|*}" -it "${sel_pod##*|}" -c "$cur_cont" -- "$@"
    done
}

_fzfkubectl_port_forward() {
    port="$1"
    shift
    if [ -z "$port" ] ; then
        printf 'no port selected, exiting\n'
        exit 1
    fi

    sel_pod=$(__fzfkubectl_select_namespaced pod)
    if [ -z "$sel_pod" ] ; then
        printf 'no pod selected, exiting\n'
        exit 1
    fi

    __fzfkubectl_execute kubectl port-forward -n "${sel_pod%%|*}" "${sel_pod##*|}" "$port" "$@"
}

_fzfkubectl_configmap() {
    sel_cm=$(__fzfkubectl_select_namespaced configmap)
    if [ -z "$sel_cm" ] ; then
        printf 'no configmap selected, exiting\n'
        exit 1
    fi

    for cur_cm in $sel_cm ; do
        __fzfkubectl_execute kubectl get configmap -n "${cur_cm%%|*}" "${cur_cm##*|}" -o json | jq -r '.data | to_entries[] | "\(.key): \(.value)"'
    done
}

_fzfkubectl_sec() {
    sel_sec=$(__fzfkubectl_select_namespaced secret)
    if [ -z "$sel_sec" ] ; then
        printf 'no secret selected, exiting\n'
        exit 1
    fi

    sel_key=$(kubectl get secret -n "${sel_sec%%|*}" "${sel_sec##*|}" -o json | jq -r '.data | to_entries[] | "\(.key)"' | ${FZF_CMD} --header-lines=0)
    if [ -z "$sel_key" ] ; then
        printf 'no key selected, exiting\n'
        exit 1
    fi

    for cur_key in $sel_key ; do
        __fzfkubectl_execute kubectl get secret -n "${sel_sec%%|*}" "${sel_sec##*|}" -o json | jq -r ".data.\"${cur_key}\"" | base64 -d
        printf '\n'
    done
}

_fzfkubectl_run() {
    image="$1"
    shift

    sel_node=$(kubectl top nodes | ${FZF_CMD} --no-multi | awk '{ print $1 }')
    if [ -z "$sel_node" ] ; then
        printf 'no node selected, exiting\n'
        exit 1
    fi

    sel_ns=$(kubectl get ns | ${FZF_CMD} --no-multi | awk '{ print $1 }')
    if [ -z "$sel_ns" ] ; then
        printf 'no namespace selected, exiting\n'
        exit 1
    fi

    printf "enter pod name:\n"
    IFS= read -r sel_name
    if [ -z "$sel_name" ] ; then
        printf 'no name entered, exiting\n'
        exit 1
    fi

    spec='
    {
        "spec": {
            "nodeSelector": {
                "kubernetes.io/hostname": "'$sel_node'"
            },
            "tolerations": [
                {
                    "operator": "Exists"
                }
            ]
        }
    }
    '

    __fzfkubectl_execute kubectl run "$sel_name" -n "$sel_ns" --rm -it --image "$image" --overrides="$spec"
}

_fzfkubectl_root() {
    sel_node=$(kubectl top nodes | ${FZF_CMD} --no-multi | awk '{ print $1 }')
    if [ -z "$sel_node" ] ; then
        printf 'no node selected, exiting\n'
        exit 1
    fi

    sel_ns=$(kubectl get ns | ${FZF_CMD} --no-multi | awk '{ print $1 }')
    if [ -z "$sel_ns" ] ; then
        printf 'no namespace selected, exiting\n'
        exit 1
    fi

    printf "enter pod name:\n"
    IFS= read -r sel_name
    if [ -z "$sel_name" ] ; then
        printf 'no name entered, exiting\n'
        exit 1
    fi

    spec='
    {
        "spec": {
            "hostPID": true,
            "hostNetwork": true,
            "containers": [
                {
                    "name": "'$sel_name'",
                    "image": "alpine",
                    "command": [
                        "/bin/sh"
                    ],
                    "args": [
                        "-c",
                        "nsenter -t 1 -m -u -i -n -p -- bash"
                    ],
                    "resources": null,
                    "stdin": true,
                    "stdinOnce": true,
                    "terminationMessagePath": "/dev/termination-log",
                    "terminationMessagePolicy": "File",
                    "tty": true,
                    "securityContext": {
                        "privileged": true
                    }
                }
            ],
            "nodeSelector": {
                "kubernetes.io/hostname": "'$sel_node'"
            },
            "tolerations": [
                {
                    "operator": "Exists"
                }
            ]
        }
    }
    '

    __fzfkubectl_execute kubectl run "$sel_name" -n "$sel_ns" --rm -it --image alpine --overrides="$spec"
}

_fzfkubectl_watch() {
    resource="$1"
    shift
    if [ -z "$resource" ] ; then
        printf 'no resources selected, exiting\n'
        exit 1
    fi

    if __fzfkubectl_is_namespaced "$resource" ; then
        sel_resources=$(__fzfkubectl_select_namespaced "$resource")
        if [ -z "$sel_resources" ] ; then
            printf 'no %s selected, exiting\n' "$resource"
            exit 1
        fi

        for cur_res in $sel_resources ; do
            __fzfkubectl_execute watch -n 1 kubectl get "$resource" -n "${cur_res%%|*}" "${cur_res##*|}" "$@"
        done
    else
        sel_resources=$(__fzfkubectl_select "$resource")
        if [ -z "$sel_resources" ] ; then
            printf 'no %s selected, exiting\n' "$resource"
            exit 1
        fi

        for cur_res in $sel_resources ; do
            __fzfkubectl_execute watch -n 1 kubectl get "$resource" "${cur_res}" "$@"
        done
    fi
}

_fzfkubectl_watch_ns() {
    sel_ns=$(__fzfkubectl_select namespace)
    if [ -z "$sel_ns" ] ; then
        printf 'no namespace selected, exiting\n'
        exit 1
    fi

    __fzfkubectl_execute watch -n 1 kubectl -n "$sel_ns" get all "$@"
}

_fzfkubectl_events() {
    sel_event=$(kubectl get events --all-namespaces | ${FZF_CMD} --no-multi | awk '{ print $1 "|" $5 }')
    if [ -z "$sel_event" ] ; then
        printf 'no event selected, exiting\n'
        exit 1
    fi

    __fzfkubectl_execute kubectl describe -n "${sel_event%%|*}" "${sel_event##*|}"
}

_fzfkubectl_top_pods() {
    sel_pod=$(kubectl top pods --all-namespaces | ${FZF_CMD} --no-multi | awk '{ print $1 "|" $2 }')
    if [ -z "$sel_pod" ] ; then
        printf 'no pod selected, exiting\n'
        exit 1
    fi

    __fzfkubectl_execute kubectl describe pod  -n "${sel_pod%%|*}" "${sel_pod##*|}"
}

_fzfkubectl_top_nodes() {
    sel_node=$(kubectl top nodes | ${FZF_CMD} --no-multi | awk '{ print $1 }')
    if [ -z "$sel_node" ] ; then
        printf 'no node selected, exiting\n'
        exit 1
    fi

    __fzfkubectl_execute kubectl describe node "$sel_node"
}

_fzfkubectl_context() {
    sel_context=$(kubectl config get-contexts -o name | ${FZF_CMD} --no-multi --header-lines=0 )
    if [ -z "$sel_context" ] ; then
        printf 'no context selected, exiting\n'
        exit 1
    fi

    __fzfkubectl_execute kubectl config use-context "$sel_context"
}

while getopts ":cvs" opt ; do
    case "$opt" in
        c) FZFKUBECTL_CLIPBOARD=true ;;
        v) FZFKUBECTL_VERBOSE=true ;;
        s) FZFKUBECTL_DRYRUN=true ;;
        \?) printf 'unknown flag, exiting\n' ; usage ; exit 1 ;;
    esac
done
shift $((OPTIND-1))

if [ "$#" -eq 0 ] ; then
    usage
    exit 0
fi

action=$1
shift
case "$action" in
    "get" | "g")
        if [ "$#" -eq 0 ] ; then
            set -- "$(__fzfkubectl_select_api_resource)"
        fi
        _fzfkubectl_get "$@"
    ;;
    "describe" | "d")
        if [ "$#" -eq 0 ] ; then
            set -- "$(__fzfkubectl_select_api_resource)"
        fi
        _fzfkubectl_describe "$@"
    ;;
    "edit" | "e")
        if [ "$#" -eq 0 ] ; then
            set -- "$(__fzfkubectl_select_api_resource)"
        fi
        _fzfkubectl_edit "$@"
    ;;
    "run")
        _fzfkubectl_run "$@"
    ;;
    "root" | "rt")
        _fzfkubectl_root "$@"
    ;;
    "delete" | "del")
        if [ "$#" -eq 0 ] ; then
            set -- "$(__fzfkubectl_select_api_resource)"
        fi
        _fzfkubectl_delete "$@"
    ;;
    "restart")
        if [ "$#" -eq 0 ] ; then
            set -- "$(__fzfkubectl_select_api_resource)"
        fi
        _fzfkubectl_restart "$@"
    ;;
    "scale")
        if [ "$#" -eq 0 ] ; then
            set -- "$(__fzfkubectl_select_api_resource)"
        fi
        _fzfkubectl_scale "$@"
    ;;
    "logs" | "l")
        _fzfkubectl_logs "$@"
    ;;
    "app-logs" | "al")
        _fzfkubectl_app_logs "$@"
    ;;
    "fetch")
        _fzfkubectl_fetch "$@"
    ;;
    "put")
        _fzfkubectl_put "$@"
    ;;
    "exec" | "ex")
        _fzfkubectl_exec "$@"
    ;;
    "port-forward" | "pf")
        _fzfkubectl_port_forward "$@"
    ;;
    "configmap" | "cm")
        _fzfkubectl_configmap
    ;;
    "secret" | "sec")
        _fzfkubectl_sec
    ;;
    "watch" | "w")
        if [ "$#" -eq 0 ] ; then
            set -- "$(__fzfkubectl_select_api_resource)"
        fi
        _fzfkubectl_watch "$@"
    ;;
    "watchns" | "wn")
        _fzfkubectl_watch_ns "$@"
    ;;
    "events" | "ev")
        _fzfkubectl_events
    ;;
    "top-pods" | "tp")
        _fzfkubectl_top_pods
    ;;
    "top-nodes" | "tn")
        _fzfkubectl_top_nodes
    ;;
    "context" | "ctx")
        _fzfkubectl_context
    ;;
    *)
        printf 'unknown action, exiting\n'
        usage
        exit 1
    ;;
esac
